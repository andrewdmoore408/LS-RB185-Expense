#! /usr/bin/env ruby
class ExpenseData
  require "pg"

  COLUMN_SEPARATOR = " | "
  TABLE_NAME = "expenses"

  attr_reader :db

  def initialize
    @db = PG.connect(dbname: "expense")
  end

  def add_expense(amount, memo)
    insert_sql = "INSERT INTO expenses (amount, memo) \
                  VALUES \
                  ($1, $2);"

    @db.exec_params(insert_sql, [amount, memo])
  end

  def display_records(rows)
    rows.each do |row|
      columns = [ row["id"].rjust(3),
                  row["created_on"].rjust(10),
                  row["amount"].rjust(12),
                  row["memo"] ]

      puts columns.join("#{COLUMN_SEPARATOR}")
    end
  end

  def list_expenses
    all_expenses = @db.exec_params "SELECT * FROM #{TABLE_NAME} ORDER BY created_on ASC;"

    display_records(all_expenses)
  end

  def search_expenses(term)
    search_sql = "SELECT * FROM #{TABLE_NAME} \
                  WHERE memo ILIKE $1 \
                  ORDER BY created_on ASC;"

    search_results = @db.exec_params(search_sql, ["%#{term}%"])

    display_records(search_results)
  end
end

class CLI
  def initialize
    @expenses = ExpenseData.new
  end

  def display_help
    help = <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP

    puts help
  end

  def run(args)
    case args.first
    when "list" then @expenses.list_expenses
    when "add"
      amount, memo = ARGV[1], ARGV[2]
      @expenses.add_expense(amount, memo) if validate_add_arguments
    when "search"
      term = ARGV[1]
      @expenses.search_expenses(term)
    else display_help
    end
  end

  def validate_search_arguments

  end

  def validate_add_arguments
    unless ARGV.length == 3
      puts "You must provide an amount and memo."
      false
    else
      true
    end
  end
end

CLI.new.run(ARGV)
