#! /usr/bin/env ruby
require "io/console"
require "pg"

class ExpenseData
  COLUMN_SEPARATOR = " | "
  TABLE_NAME = "expenses"

  attr_reader :db

  def initialize
    @db = PG.connect(dbname: "expense")
    setup_schema
  end

  def add_expense(amount, memo)
    insert_sql = "INSERT INTO #{TABLE_NAME} (amount, memo) \
                  VALUES \
                  ($1, $2);"

    @db.exec_params(insert_sql, [amount, memo])
  end

  def delete_all_expenses
    delete_all_sql = "DELETE FROM #{TABLE_NAME};"

    @db.exec_params(delete_all_sql)

    puts "All expenses have been deleted."
  end

  def delete_expense(id)
    selected_to_delete_sql = "SELECT * FROM #{TABLE_NAME} \
                              WHERE id = $1;"

    to_delete = @db.exec_params(selected_to_delete_sql, [id])

    if to_delete.values.length == 1
      delete_sql = "DELETE FROM #{TABLE_NAME} WHERE id = $1"
      @db.exec_params(delete_sql, [id])
      puts "The following expense has been deleted:"
      display_records(to_delete)
    else
      puts "There is no expense with the id '#{id}'"
    end
  end

  def list_expenses
    all_expenses = @db.exec_params "SELECT * FROM #{TABLE_NAME} ORDER BY created_on ASC;"

    display_records_with_count_total(all_expenses)
  end

  def search_expenses(term)
    search_sql = "SELECT * FROM #{TABLE_NAME} \
                  WHERE memo ILIKE $1 \
                  ORDER BY created_on ASC;"

    search_results = @db.exec_params(search_sql, ["%#{term}%"])

    display_records_with_count_total(search_results)
  end

  private

  def display_records(rows)
    rows.each do |row|
      columns = [ row["id"].rjust(3),
                  row["created_on"].rjust(10),
                  row["amount"].rjust(12),
                  row["memo"] ]

      puts columns.join("#{COLUMN_SEPARATOR}")
    end
  end

  def display_records_with_count_total(rows)
    puts "There are #{rows.ntuples} expenses."

    display_records(rows)

    puts "-" * 50
    puts "Total" + (" " * 22) + format('%.2f', total(rows))
  end

  def setup_schema
    table_count_sql = "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'expenses';"

    result = @db.exec table_count_sql
    count = result.values.first.first.to_i

    unless count == 1
      create_table_sql = "CREATE TABLE #{TABLE_NAME}(                          \
                           id serial PRIMARY KEY,                              \
                           amount numeric(6, 2) NOT NULL CHECK (amount > 0.00),\
                           memo text NOT NULL,                                 \
                           created_on date DEFAULT NOW()                       \
                          );"

      @db.exec create_table_sql
    end
  end

  def total(rows)
    sum = rows.reduce(0) { |memo, row| memo += row["amount"].to_f }
    sum
  end
end

class CLI
  def initialize
    @expenses = ExpenseData.new
  end

  def display_help
    help = <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP

    puts help
  end

  def run(args)
    case args.first
    when "list" then @expenses.list_expenses
    when "add"
      amount, memo = ARGV[1], ARGV[2]
      @expenses.add_expense(amount, memo) if valid_add_arguments
    when "clear"
      if user_confirms_clear
        @expenses.delete_all_expenses
      end
    when "delete"
      id = ARGV[1]
      @expenses.delete_expense(id) if valid_delete_arguments
    when "search"
      term = ARGV[1]
      @expenses.search_expenses(term) if valid_search_arguments
    else display_help
    end
  end

  def user_confirms_clear
    puts "This will remove all expenses. Are you sure? (y/n)"

    clear_confirm = STDIN.getch

    if clear_confirm.downcase == "y"
      true
    else
      false
    end
  end

  def valid_delete_arguments
    unless ARGV.length == 2 &&
           ARGV[1] =~ /^[0-9]{1,}$/
      abort "You must include exactly one id to delete"
    else
      true
    end
  end

  def valid_search_arguments
    unless ARGV.length == 2
      abort "You must include one term to search"
    else
      true
    end
  end

  def valid_add_arguments
    unless ARGV.length == 3
      abort "You must provide an amount and memo."
    else
      true
    end
  end
end

CLI.new.run(ARGV)
