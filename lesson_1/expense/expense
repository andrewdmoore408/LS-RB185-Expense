#! /usr/bin/env ruby

require "pg"

COLUMN_DATA_WIDTH = 11
COLUMN = "|"
TABLE_NAME = "expenses"

def add_expense
  amount, memo = ARGV[1], ARGV[2]
  db = PG.connect(dbname: "expense")

  insert_sql = "INSERT INTO expenses (amount, memo) \
                VALUES \
                ($1, $2);"

  db.exec_params(insert_sql, [amount, memo])
end

def display_all_expenses
  # Connect to the database and get an object representing that
  db = PG.connect(dbname: "expense")

  all_expenses = db.exec_params "SELECT * FROM #{TABLE_NAME} ORDER BY created_on ASC;"

  all_expenses.each do |expense|
    row = " #{expense["id"]} #{COLUMN}" +
          " #{expense["created_on"]} #{COLUMN}" +
          " #{expense["amount"].rjust(COLUMN_DATA_WIDTH)} #{COLUMN}" +
          " #{expense["memo"]}"

    puts row
  end
end

def display_help
  help = <<~HELP
    An expense recording system

    Commands:

    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
  HELP

  puts help
end

def validate_add_arguments
  unless ARGV.length == 3
    puts "You must provide an amount and memo."
    false
  else
    true
  end
end

case ARGV.first
when "list" then display_all_expenses
when "add" then add_expense if validate_add_arguments
else display_help
end

# display_all_expenses(db)