#! /usr/bin/env ruby
class ExpenseData
  require "pg"

  COLUMN_DATA_WIDTH = 11
  COLUMN = "|"
  TABLE_NAME = "expenses"

  attr_reader :db

  def initialize
    @db = PG.connect(dbname: "expense")
  end

  def add_expense(amount, memo)
    insert_sql = "INSERT INTO expenses (amount, memo) \
                  VALUES \
                  ($1, $2);"

    @db.exec_params(insert_sql, [amount, memo])
  end

  def display_all_expenses
    all_expenses = @db.exec_params "SELECT * FROM #{TABLE_NAME} ORDER BY created_on ASC;"

    all_expenses.each do |expense|
      row = " #{expense["id"]} #{COLUMN}" +
            " #{expense["created_on"]} #{COLUMN}" +
            " #{expense["amount"].rjust(COLUMN_DATA_WIDTH)} #{COLUMN}" +
            " #{expense["memo"]}"

      puts row
    end
  end
end

class CLI
  def initialize
    @expenses = ExpenseData.new
  end

  def display_help
    help = <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP

    puts help
  end

  def run(args)
    case args.first
    when "list" then @expenses.display_all_expenses
    when "add"
      amount, memo = ARGV[1], ARGV[2]
      @expenses.add_expense(amount, memo) if validate_add_arguments
    when "search" then @expenses.search
    else display_help
    end
  end

  def validate_add_arguments
    unless ARGV.length == 3
      puts "You must provide an amount and memo."
      false
    else
      true
    end
  end
end

CLI.new.run(ARGV)
